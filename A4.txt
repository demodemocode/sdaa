import java.util.*;
public class dij {
private static final int MAX_VALUE = Integer.MAX_VALUE;
public static void dijkstra(int[][] graph, int source) {
int num_ver = graph.length;
int[] dist = new int[num_ver];
boolean[] visited = new boolean[num_ver];
for (int i = 0; i < num_ver; i++) {
dist[i] = MAX_VALUE;
visited[i] = false;
}
dist[source] = 0;
for (int count = 0; count < num_ver- 1; count++) {
int u = -1;
for (int i = 0; i < num_ver; i++) {
if (!visited[i] && (u == -1 || dist[i] < dist[u])) {
u = i;
}
}
visited[u] = true;
for (int v = 0; v < num_ver; v++) {
if (!visited[v] && graph[u][v] != 0 && dist[u] != MAX_VALUE && dist[u] + graph[u][v] < dist[v]) {
dist[v] = dist[u] + graph[u][v];
}
}
}
System.out.println("Vertex\t\tDistance from Source");
for (int i = 0; i < num_ver; i++) {
System.out.println(i + "\t\t" + dist[i]);
}
}
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.println("Enter the number of nodes:");
int numNodes = sc.nextInt();
int[][] input = new int[numNodes][numNodes];
System.out.println("Enter the input matrix:");
for (int i = 0; i < numNodes; i++) {
for (int j = 0; j < numNodes; j++) {
input[i][j] = sc.nextInt();

}
}
System.out.println("Enter the source node:");
int sourceNode = sc.nextInt();
dijkstra(input, sourceNode);
}
}